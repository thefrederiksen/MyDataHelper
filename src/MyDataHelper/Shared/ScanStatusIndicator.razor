@inject IScanStatusService ScanStatusService
@implements IDisposable

<div class="flex items-center">
    @if (IsScanning)
    {
        <div class="flex items-center text-blue-600">
            <svg class="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-sm font-medium">@Status (@Progress%)</span>
        </div>
    }
    else
    {
        <div class="flex items-center text-green-600">
            <i class="bi bi-check-circle-fill mr-2"></i>
            <span class="text-sm font-medium">@Status</span>
        </div>
    }
</div>

@code {
    private string Status = "Ready";
    private int Progress = 0;
    private bool IsScanning = false;
    
    protected override void OnInitialized()
    {
        ScanStatusService.StatusChanged += OnStatusChanged;
        UpdateStatus();
    }
    
    private void OnStatusChanged(object? sender, ScanStatusEventArgs e)
    {
        InvokeAsync(() =>
        {
            Status = e.Status;
            Progress = e.Progress;
            IsScanning = e.IsScanning;
            StateHasChanged();
        });
    }
    
    private void UpdateStatus()
    {
        Status = ScanStatusService.CurrentStatus;
        Progress = ScanStatusService.Progress;
        IsScanning = ScanStatusService.IsScanning;
    }
    
    public void Dispose()
    {
        ScanStatusService.StatusChanged -= OnStatusChanged;
    }
}