@page "/"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<MyDataHelperDbContext> DbContextFactory
@inject IDiskReportService ReportService
@inject NavigationManager Navigation

<PageTitle>MyDataHelper - Dashboard</PageTitle>

<div class="p-6">
    @if (IsLoading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-4 border-primary-600 border-t-transparent"></div>
        </div>
    }
    else if (Report != null && Report.TotalSize > 0)
    {
        <!-- Stats Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Total Size</p>
                        <p class="text-2xl font-bold text-gray-900 mt-2">@FormatBytes(Report.TotalSize)</p>
                    </div>
                    <div class="rounded-full bg-blue-100 p-3">
                        <i class="bi bi-hdd-fill text-2xl text-blue-600"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Total Files</p>
                        <p class="text-2xl font-bold text-gray-900 mt-2">@Report.TotalFiles.ToString("N0")</p>
                    </div>
                    <div class="rounded-full bg-green-100 p-3">
                        <i class="bi bi-file-earmark-fill text-2xl text-green-600"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Total Folders</p>
                        <p class="text-2xl font-bold text-gray-900 mt-2">@Report.TotalFolders.ToString("N0")</p>
                    </div>
                    <div class="rounded-full bg-purple-100 p-3">
                        <i class="bi bi-folder-fill text-2xl text-purple-600"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Scan Roots</p>
                        <p class="text-2xl font-bold text-gray-900 mt-2">@Report.ScanRoots.Count</p>
                    </div>
                    <div class="rounded-full bg-orange-100 p-3">
                        <i class="bi bi-diagram-3-fill text-2xl text-orange-600"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <!-- Scan Roots Card -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">Scan Roots</h2>
                </div>
                <div class="p-6">
                    @if (Report.ScanRoots.Any())
                    {
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead>
                                    <tr>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Path</th>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Files</th>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Scanned</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    @foreach (var root in Report.ScanRoots)
                                    {
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-3 py-2 text-sm text-gray-900">@root.DisplayName</td>
                                            <td class="px-3 py-2 text-sm text-gray-900">@FormatBytes(root.Size)</td>
                                            <td class="px-3 py-2 text-sm text-gray-900">@root.FileCount.ToString("N0")</td>
                                            <td class="px-3 py-2 text-sm text-gray-500">@root.LastScanned?.ToString("g")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    <a href="/scan" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <i class="bi bi-arrow-repeat mr-2"></i>
                        Manage Scans
                    </a>
                </div>
            </div>
            
            <!-- Top File Types Card -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">Top File Types</h2>
                </div>
                <div class="p-6">
                    @if (Report.FileTypeBreakdown.Any())
                    {
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead>
                                    <tr>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Count</th>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                                        <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">%</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    @foreach (var type in Report.FileTypeBreakdown.Take(10))
                                    {
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-3 py-2 text-sm text-gray-900">
                                                <span class="inline-block w-3 h-3 rounded mr-2" style="background-color: @type.ColorCode"></span>
                                                @type.Extension
                                            </td>
                                            <td class="px-3 py-2 text-sm text-gray-900">@type.FileCount.ToString("N0")</td>
                                            <td class="px-3 py-2 text-sm text-gray-900">@FormatBytes(type.TotalSize)</td>
                                            <td class="px-3 py-2 text-sm text-gray-500">@type.PercentageOfTotal.ToString("F1")%</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Largest Files Card -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Largest Files</h2>
            </div>
            <div class="p-6">
                @if (Report.LargestFiles.Any())
                {
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                    <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Path</th>
                                    <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
                                    <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Modified</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                                @foreach (var file in Report.LargestFiles.Take(10))
                                {
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-3 py-2 text-sm text-gray-900 font-medium">@file.Name</td>
                                        <td class="px-3 py-2 text-sm text-gray-500 max-w-xs truncate" title="@file.FullPath">
                                            @file.FullPath
                                        </td>
                                        <td class="px-3 py-2 text-sm text-gray-900">@FormatBytes(file.Size)</td>
                                        <td class="px-3 py-2 text-sm text-gray-500">@file.LastModified.ToString("g")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Initial Setup -->
        <div class="max-w-6xl mx-auto py-8">
            <div class="text-center mb-8">
                <div class="inline-flex items-center justify-center w-20 h-20 rounded-full bg-primary-100 mb-4">
                    <i class="bi bi-hdd-stack-fill text-4xl text-primary-600"></i>
                </div>
                <h2 class="text-3xl font-bold text-gray-900 mb-2">Select Drives to Analyze</h2>
                <p class="text-lg text-gray-600">Choose which drives you want to scan for disk space analysis</p>
            </div>
            
            <DriveSelector OnDrivesSelected="OnDrivesSelected" OnScanStarted="OnScanStarted" />
            
            <div class="mt-8 text-center">
                <div class="border-t border-gray-200 pt-6">
                    <p class="text-gray-600">
                        <i class="bi bi-info-circle mr-2"></i>
                        You can also <a href="/scan" class="text-primary-600 hover:text-primary-700 font-medium">add specific folders</a> to scan instead of entire drives
                    </p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool IsLoading = true;
    private DiskUsageReport? Report;
    private List<string> SelectedDrives = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }
    
    private async Task LoadDashboardData()
    {
        try
        {
            IsLoading = true;
            Report = await ReportService.GenerateReportAsync();
        }
        catch (Exception ex)
        {
            Logger.LogException(ex, "Failed to load dashboard data");
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private void OnDrivesSelected(List<string> drives)
    {
        SelectedDrives = drives;
        StateHasChanged();
    }
    
    private void OnScanStarted()
    {
        // Navigate to the scan page when scan is started
        Navigation.NavigateTo("/scan");
    }
    
    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        
        return $"{len:0.##} {sizes[order]}";
    }
}