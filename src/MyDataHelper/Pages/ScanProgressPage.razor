@page "/scan-progress"
@using MyDataHelper.Models
@inject IParallelDiskScanService ParallelScanService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>MyDataHelper - Scan Progress</PageTitle>

@if (CurrentProgress != null && ParallelScanService.IsScanning)
{
    <!-- Enhanced Progress Display -->
    <div class="w-full max-w-4xl mx-auto px-4">
        <!-- Main Progress Card -->
        <div class="bg-white rounded-xl shadow-xl overflow-hidden">
            <!-- Animated Header -->
            <div class="bg-gradient-to-r from-blue-600 to-indigo-600 p-8 relative overflow-hidden">
                <!-- Animated Background Effect -->
                <div class="absolute inset-0">
                    <div class="absolute -top-10 -right-10 w-40 h-40 bg-white opacity-10 rounded-full blur-3xl animate-pulse"></div>
                    <div class="absolute -bottom-10 -left-10 w-40 h-40 bg-white opacity-10 rounded-full blur-3xl animate-pulse" style="animation-delay: 1s;"></div>
                    <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-white opacity-5 rounded-full blur-3xl"></div>
                </div>
                
                <div class="relative">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-4">
                            <!-- Animated Icon -->
                            <div class="relative">
                                <div class="absolute inset-0 bg-white opacity-20 blur-xl rounded-full animate-pulse"></div>
                                <div class="relative p-4 bg-white bg-opacity-20 backdrop-blur rounded-2xl">
                                    @if (ParallelScanService.IsPaused)
                                    {
                                        <i class="bi bi-pause-circle text-4xl text-white"></i>
                                    }
                                    else
                                    {
                                        <div class="animate-spin rounded-full h-10 w-10 border-4 border-white border-t-transparent"></div>
                                    }
                                </div>
                            </div>
                            
                            <!-- Title and Status -->
                            <div class="text-white">
                                <h1 class="text-3xl font-bold mb-1">
                                    @if (ParallelScanService.IsPaused)
                                    {
                                        <text>Scan Paused</text>
                                    }
                                    else
                                    {
                                        <text>Disk Scan in Progress</text>
                                    }
                                </h1>
                                <div class="flex items-center gap-2 text-blue-100">
                                    <i class="bi bi-hdd"></i>
                                    <span class="text-lg">Analyzing your disk space usage...</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Header Actions -->
                        <div class="flex items-center gap-3">
                            <div class="text-right text-white mr-4">
                                <p class="text-sm text-blue-100">Scan Speed</p>
                                <p class="text-2xl font-bold">
                                    @if (ParallelScanService.IsPaused)
                                    {
                                        <text>Paused</text>
                                    }
                                    else
                                    {
                                        @($"{CurrentProgress.FilesPerSecond:N0} files/s")
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Content Section -->
            <div class="p-8">

            <!-- Overall Progress Section -->
            <div class="bg-gray-50 rounded-lg p-6 mb-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Overall Progress</h2>
                
                <!-- Progress Info Row -->
                <div class="flex justify-between items-end mb-3">
                    <div>
                        <p class="text-sm text-gray-600">Directories scanned</p>
                        <p class="text-lg font-medium text-gray-900">
                            @CurrentProgress.CompletedDirectories.ToString("N0") of @CurrentProgress.TotalDirectories.ToString("N0")
                        </p>
                    </div>
                    <div class="text-right">
                        <p class="text-sm text-gray-600">
                            @if (CurrentProgress.EstimatedTimeRemaining.HasValue)
                            {
                                @FormatTimeSpan(CurrentProgress.EstimatedTimeRemaining.Value)
                                <text> remaining</text>
                            }
                            else
                            {
                                <text>Calculating...</text>
                            }
                        </p>
                        <p class="text-3xl font-bold text-blue-600">
                            @CurrentProgress.CompletionPercentage.ToString("F1")%
                        </p>
                    </div>
                </div>

                <!-- Progress Bar -->
                <div class="w-full bg-gray-200 rounded-full h-4">
                    <div class="bg-blue-600 h-4 rounded-full transition-all duration-300" 
                         style="width: @(CurrentProgress.CompletionPercentage)%"></div>
                </div>
            </div>

            <!-- Compact Stats Row -->
            <div class="flex justify-between gap-4 mb-6">
                <!-- Files Scanned -->
                <div class="flex-1 bg-white border border-gray-200 rounded-lg p-3 flex items-center justify-between">
                    <div>
                        <p class="text-xs text-gray-500 uppercase tracking-wider">Files Scanned</p>
                        <p class="text-xl font-bold text-gray-900">@CurrentProgress.ProcessedFiles.ToString("N0")</p>
                        <p class="text-xs text-gray-500">
                            @if (ParallelScanService.IsPaused)
                            {
                                <text>Scan paused</text>
                            }
                            else
                            {
                                @($"{CurrentProgress.FilesPerSecond:N0} files/sec")
                            }
                        </p>
                    </div>
                    <i class="bi bi-file-earmark text-2xl text-blue-500"></i>
                </div>

                <!-- Total Size -->
                <div class="flex-1 bg-white border border-gray-200 rounded-lg p-3 flex items-center justify-between">
                    <div>
                        <p class="text-xs text-gray-500 uppercase tracking-wider">Total Size</p>
                        <p class="text-xl font-bold text-gray-900">@FormatBytes(CurrentProgress.TotalSizeBytes)</p>
                        <p class="text-xs text-gray-500">Data processed</p>
                    </div>
                    <i class="bi bi-hdd text-2xl text-green-500"></i>
                </div>

                <!-- Elapsed Time -->
                <div class="flex-1 bg-white border border-gray-200 rounded-lg p-3 flex items-center justify-between">
                    <div>
                        <p class="text-xs text-gray-500 uppercase tracking-wider">Elapsed Time</p>
                        <p class="text-xl font-bold text-gray-900">@FormatTimeSpan(CurrentProgress.ElapsedTime)</p>
                        <p class="text-xs text-gray-500">Since started</p>
                    </div>
                    <i class="bi bi-clock text-2xl text-orange-500"></i>
                </div>

                <!-- Files/Second -->
                <div class="flex-1 bg-white border border-gray-200 rounded-lg p-3 flex items-center justify-between">
                    <div>
                        <p class="text-xs text-gray-500 uppercase tracking-wider">Files/Second</p>
                        <p class="text-xl font-bold text-gray-900">
                            @if (ParallelScanService.IsPaused)
                            {
                                <text>-</text>
                            }
                            else
                            {
                                @CurrentProgress.FilesPerSecond.ToString("N0")
                            }
                        </p>
                        <p class="text-xs text-gray-500">
                            @if (ParallelScanService.IsPaused)
                            {
                                <text>Paused</text>
                            }
                            else
                            {
                                <text>Current speed</text>
                            }
                        </p>
                    </div>
                    <i class="bi bi-speedometer2 text-2xl text-purple-500"></i>
                </div>
            </div>

            <!-- Directory Queue Status - Compact Box Style -->
            <div class="bg-gray-50 rounded-lg p-4 mb-6">
                <h3 class="text-sm font-semibold text-gray-700 mb-3">Directory Status</h3>
                <div class="flex justify-between gap-4">
                    <div class="flex-1 bg-white rounded-lg p-3 border border-gray-200">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-xs text-gray-500 uppercase">Queued</p>
                                <p class="text-lg font-bold text-gray-900">@CurrentProgress.QueuedDirectories.ToString("N0")</p>
                            </div>
                            <i class="bi bi-hourglass-split text-xl text-gray-400"></i>
                        </div>
                    </div>
                    <div class="flex-1 bg-white rounded-lg p-3 border border-blue-200">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-xs text-gray-500 uppercase">Active</p>
                                <p class="text-lg font-bold text-blue-600">@CurrentProgress.ScanningDirectories.ToString("N0")</p>
                            </div>
                            <div class="animate-spin rounded-full h-5 w-5 border-2 border-blue-500 border-t-transparent"></div>
                        </div>
                    </div>
                    <div class="flex-1 bg-white rounded-lg p-3 border border-green-200">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-xs text-gray-500 uppercase">Completed</p>
                                <p class="text-lg font-bold text-green-600">@CurrentProgress.CompletedDirectories.ToString("N0")</p>
                            </div>
                            <i class="bi bi-check-circle text-xl text-green-500"></i>
                        </div>
                    </div>
                    <div class="flex-1 bg-white rounded-lg p-3 border border-red-200">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-xs text-gray-500 uppercase">Errors</p>
                                <p class="text-lg font-bold text-red-600">@CurrentProgress.ErrorDirectories.ToString("N0")</p>
                            </div>
                            <i class="bi bi-exclamation-triangle text-xl text-red-500"></i>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-center gap-4">
                <button class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors font-medium" 
                        @onclick="PauseScan">
                    @if (ParallelScanService.IsPaused)
                    {
                        <i class="bi bi-play-fill mr-2"></i>
                        <span>Resume</span>
                    }
                    else
                    {
                        <i class="bi bi-pause-fill mr-2"></i>
                        <span>Pause</span>
                    }
                </button>
                <button class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-medium" 
                        @onclick="CancelScan">
                    <i class="bi bi-stop-fill mr-2"></i>
                    Cancel Scan
                </button>
            </div>
        </div>
    </div>
    </div>
}
else if (!ParallelScanService.IsScanning)
{
    <!-- No Scan Running -->
    <div class="flex items-center justify-center min-h-[60vh]">
        <div class="text-center">
            <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <i class="bi bi-hdd text-4xl text-gray-400"></i>
            </div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">No Scan in Progress</h2>
            <p class="text-gray-600 mb-4">Start a new disk scan to analyze your storage usage.</p>
            <button class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium" 
                    @onclick="NavigateToScanSetup">
                <i class="bi bi-play-fill mr-2"></i>
                Start New Scan
            </button>
        </div>
    </div>
}
else
{
    <!-- Loading State -->
    <div class="flex items-center justify-center min-h-[60vh]">
        <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-3 border-blue-600 border-t-transparent mx-auto mb-4"></div>
            <h2 class="text-xl font-semibold text-gray-900 mb-2">Initializing scan...</h2>
            <p class="text-gray-600">Please wait while we prepare the scanning process.</p>
        </div>
    </div>
}

@code {
    private EnhancedScanProgress? CurrentProgress;
    private System.Threading.Timer? _updateTimer;

    protected override async Task OnInitializedAsync()
    {
        CurrentProgress = ParallelScanService.CurrentProgress;
        
        // Subscribe to events
        ParallelScanService.ScanProgressChanged += OnScanProgressChanged;
        ParallelScanService.ScanCompleted += OnScanCompleted;
        
        // Start update timer for smooth progress updates
        _updateTimer = new System.Threading.Timer(UpdateProgress, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        
        // If no scan is running, redirect to scan setup after a short delay
        if (!ParallelScanService.IsScanning)
        {
            await Task.Delay(3000);
            if (!ParallelScanService.IsScanning)
            {
                NavigateToScanSetup();
            }
        }
    }

    private void UpdateProgress(object? state)
    {
        if (ParallelScanService.IsScanning)
        {
            CurrentProgress = ParallelScanService.CurrentProgress;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnScanProgressChanged(object? sender, EnhancedScanProgressEventArgs e)
    {
        CurrentProgress = e.Progress;
        InvokeAsync(StateHasChanged);
    }

    private async void OnScanCompleted(object? sender, EnhancedScanCompletedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (e.Success)
            {
                await Task.Delay(1000);
                // Navigate to ultimate dashboard page
                Navigation.NavigateTo($"/ultimate-dashboard/{e.ScanRootId}");
            }
            else
            {
                NavigateToScanSetup();
            }
        });
    }

    private void CancelScan()
    {
        ParallelScanService.CancelScan();
    }

    private void PauseScan()
    {
        if (ParallelScanService.IsPaused)
        {
            ParallelScanService.ResumeScan();
        }
        else
        {
            ParallelScanService.PauseScan();
        }
    }

    private void NavigateToScanSetup()
    {
        Navigation.NavigateTo("/enhanced-scan");
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        
        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        if (timeSpan.TotalDays >= 1)
            return $"{timeSpan.Days}d {timeSpan.Hours:D2}h {timeSpan.Minutes:D2}m";
        else if (timeSpan.TotalHours >= 1)
            return $"{timeSpan.Hours:D2}h {timeSpan.Minutes:D2}m {timeSpan.Seconds:D2}s";
        else
            return $"{timeSpan.Minutes:D2}m {timeSpan.Seconds:D2}s";
    }

    public void Dispose()
    {
        _updateTimer?.Dispose();
        ParallelScanService.ScanProgressChanged -= OnScanProgressChanged;
        ParallelScanService.ScanCompleted -= OnScanCompleted;
    }
}